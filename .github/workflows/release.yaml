---
name: terraform-module-release
on:
  pull_request:
    # Requires 'closed' to trigger the release process when the PR is merged
    types: [opened, reopened, synchronize, closed]

permissions:
  # Required for pushing tags, creating releases, and updating the repository
  contents: write
  # Required to comment on the pull request with release details
  pull-requests: write

jobs:
  # ┌────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┐
  # │   TERRAFORM MODULE RELEASE JOB                                                                                     │
  # │   ---                                                                                                              │
  # │                                                                                                                    │
  # │   The 'release' job checks out code from the repository and uses the `terraform-module-releaser` action that       │
  # │   creates proper tags and releases for every affected Terraform module, based on commit messages. It follows       │
  # │   Semantic Versioning (SemVer) and Conventional Commits to determine the release type (major, minor, patch).       │
  # │   For example, if the commit message contains "fix: correct variable name in main.tf" the action will detect it    |
  # |   as a patch change and increment the affected Terraform module's Git tag version from v0.0.3 to v0.0.4.           │
  # │                                                                                                                    │
  # └────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┘
  release:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Terraform Module Releaser
        uses: techpivot/terraform-module-releaser@v1.5.0
        id: terraform-module-release
        with:
          # Keywords indicating a major version bump
          major-keywords: major change,breaking change
          # Keywords indicating a minor version bump
          minor-keywords: feat,feature
          # Keywords indicating a patch version bump
          patch-keywords: fix,chore,docs
          default-first-tag: v0.0.1
          # Whether tags and releases from Terraform modules that have been deleted should be automatically removed
          delete-legacy-tags: false
          # Whether to disable wiki generation for Terraform modules
          disable-wiki: false
          # Module paths to completely ignore
          module-path-ignore: "**/examples"
          # File patterns to exclude from triggering version changes in Terraform modules
          module-change-exclude-patterns: .gitignore,*.md,*.tftest.hcl,tests/**
          # File patterns to exclude when bundling a Terraform module for tag/release
          module-asset-exclude-patterns: .gitignore,*.md,*.tftest.hcl,tests/**

      - name: Update examples/usage.tf
        run: |
          git config --global user.name 'github-actions'
          git config --global user.email 'github-actions@users.noreply.github.com'
          git checkout ${{ github.head_ref }}
          echo '${{ steps.terraform-module-release.outputs.changed-modules-map }}' | \
            jq -r 'to_entries[] | "\(.key) \(.value.path) \(.value.nextTag)"' | \
            while read -r module path nextTag; do
              echo 'Checking $module'
              usage_file='$path/examples/usage.tf'
              echo 'Changing tag for $module to $nextTag'
              sed -Ei 's|(source = \"git[^?]+\?ref=).*|\1$nextTag\"|g' '$usage_file'
              if git diff --quiet '$usage_file'; then
                echo '$usage_file is already updated to the latest version'
              else
                git add '$usage_file' -v
                git commit -m 'feat: update $module tag to $nextTag'
                git push
              fi
          done
